.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "M_TRIE_INIT" "3" "March 2017" "lovasko" "m_trie"
.
.SH "NAME"
\fBm_trie_init\fR \- initialise the trie
.
.SH "LIBRARY"
m_trie (\-lmtrie)
.
.SH "SYNOPSIS"
\fB#include <m_trie\.h>\fR
.
.P
\fBint\fR \fIm_trie_init\fR(\fIm_trie\fI\fR\fR \fItrie\fR, \fIint16_t\fR (\fIhash\fR)(\fIchar\fR), \fIuint8_t\fR \fIowrt\fR);
.
.SH "DESCRIPTION"
The \fIm_trie_free\fR function initialises the \fItrie\fR data structure\. It is important to note that this function does not perform the actual allocation of the structure, which has to be done by the user\.
.
.P
The \fIhash\fR argument is a pointer to a hashing function\. The \fIm_trie_init\fR function does not need any more information about the hashing function, as it tests it on every possible input and performs internal computations on the set of results\.
.
.P
The \fIowrt\fR argument specifies the overwriting policy of the data structure\. Two possible values are: \fIM_TRIE_OVERWRITE_ALLOW\fR and \fIM_TRIE_OVERWRITE_PREVENT\fR\.
.
.SH "TIME COMPLEXITY"
\fBO\fR(\fI1\fR)\.
.
.SH "SPACE COMPLEXITY"
\fBO\fR(\fI1\fR)\.
.
.SH "RETURN VALUES"
.
.IP "\(bu" 4
M_TRIE_OK: success
.
.IP "\(bu" 4
M_TRIE_E_NULL: \fItrie\fR and/or \fIhash\fR were NULL
.
.IP "\(bu" 4
M_TRIE_E_UNKNOWN \fIowrt\fR value is invalid
.
.IP "" 0
.
.SH "SEE ALSO"
m_trie_insert(3), m_trie_free(3), m_trie_hash(3)
